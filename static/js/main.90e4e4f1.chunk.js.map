{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","assignNewQuoteIndex","selectedQuote","Card","CardContent","Typography","id","quote","author","CardActions","Button","size","onClick","IconButton","href","target","icon","faTwitter","App","props","state","quotes","selectedQuoteIndex","bind","generateNewQuoteIndex","fetch","then","data","json","setState","this","length","random","Grid","className","classes","container","justify","xs","lg","item","Number","isInteger","Component","withStyles","display","height","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8XA4BeA,EAlBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,cAAxB,OACjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACK,kBAACC,EAAA,EAAD,CAAYC,GAAG,QACRJ,EAAcK,MADrB,MAC8B,0BAAMD,GAAG,UAAUJ,EAAcM,OAAjC,OAGnC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQJ,GAAG,YAAYK,KAAK,QAAQC,QAASX,GAA7C,cAGA,kBAACY,EAAA,EAAD,CAAYP,GAAG,cAAcQ,KAAI,gDAA2CZ,EAAcK,OAASQ,OAAO,UACtG,kBAAC,IAAD,CAAiBC,KAAMC,IAAWN,KAAK,WCRjDO,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,GAGRC,mBAAoB,MAExB,EAAKrB,oBAAsB,EAAKA,oBAAoBsB,KAAzB,gBAC3B,EAAKC,sBAAwB,EAAKA,sBAAsBD,KAA3B,gBATd,E,iFAYE,IAAD,OAChBE,MAAM,yIACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAL,GAAM,OAAI,EAAKQ,SAAS,CAAER,UAAU,EAAKpB,0B,8CAWnD,GAAK6B,KAAKV,MAAMC,OAAOU,OAGvB,OAAOC,iBAAO,EAAGF,KAAKV,MAAMC,OAAOU,OAAS,K,4CAI5CD,KAAKD,SAAS,CAAEP,mBAAoBQ,KAAKN,4B,+BAKzC,OACI,kBAACS,EAAA,EAAD,CAAMC,UAAWJ,KAAKX,MAAMgB,QAAQC,UAAW9B,GAAG,YAAY+B,QAAQ,SAASD,WAAS,GACpF,kBAACH,EAAA,EAAD,CAAMK,GAAI,GAAIC,GAAI,EAAGC,MAAI,GAEjBV,KAAK5B,cACD,kBAAC,EAAD,CAAcA,cAAe4B,KAAK5B,cAAeD,oBAAqB6B,KAAK7B,sBACzE,S,oCAzBtB,GAAK6B,KAAKV,MAAMC,OAAOU,QAAWU,OAAOC,UAAUZ,KAAKV,MAAME,oBAG9D,OAAOQ,KAAKV,MAAMC,OAAOS,KAAKV,MAAME,wB,GAvB1BqB,aAsDHC,cA9DA,CACPR,UAAW,CACPS,QAAS,OACTC,OAAQ,QACRC,WAAY,WA0DTH,CAAmB1B,GCxDd8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90e4e4f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\r\n    <Card>\r\n        <CardContent>\n             <Typography id=\"text\">\n                   {selectedQuote.quote} - <span id=\"author\">{selectedQuote.author} </span>\n             </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n            <Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteIndex} >\n                Next Quote\n            </Button>\r\n            <IconButton id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${selectedQuote.quote}`} target=\"_blank\">\r\n                <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\r\n            </IconButton>\r\n        </CardActions>\r\n    </Card>\n);\n        \nexport default QuoteMachine;","import React, { Component } from 'react';\nimport { random } from \"lodash\";\nimport 'typeface-roboto';\nimport { Grid, withStyles } from \"@material-ui/core\";\nimport QuoteMachine from \"./components/QuoteMachine\";\n\nconst styles = {\r\n        container: {\r\n            display: \"flex\",\r\n            height: \"100vh\",\r\n            alignItems: \"center\"\r\n        }\r\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\r\n        this.state = {\r\n            quotes: [\r\n\r\n            ],\r\n            selectedQuoteIndex: null,\r\n        }\r\n        this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\r\n        this.generateNewQuoteIndex = this.generateNewQuoteIndex.bind(this);\r\n    }\n\n    componentDidMount() {\n        fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\r\n            .then(data => data.json())\n            .then(quotes => this.setState({ quotes }, this.assignNewQuoteIndex));\n    }\n\n    get selectedQuote() {\n        if (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\r\n            return undefined;\r\n        }\n        return this.state.quotes[this.state.selectedQuoteIndex];\n    }\n\n    generateNewQuoteIndex() {\n        if (!this.state.quotes.length) {\n            return undefined;\n        }\n        return random(0, this.state.quotes.length - 1);\r\n    }\n\n    assignNewQuoteIndex() {\n        this.setState({ selectedQuoteIndex: this.generateNewQuoteIndex() })\n\r\n    }\n\n    render() {\n        return (\n            <Grid className={this.props.classes.container} id=\"quote-box\" justify=\"center\" container>\n                <Grid xs={11} lg={8} item>\n                    {\n                        this.selectedQuote ?\n                            <QuoteMachine selectedQuote={this.selectedQuote} assignNewQuoteIndex={this.assignNewQuoteIndex} />\n                            : null\n                    }\n                            \n                </Grid> \n            </Grid>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}